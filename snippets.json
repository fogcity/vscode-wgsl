{
  "int scalar": {
    "prefix": ["i", "i3", "i32"],
    "body": ["i32"],
    "description": ["a signed, two’s complement, 32-bit integer."]
  },
  "unsigned int scalar": {
    "prefix": ["u", "u3", "u32"],
    "body": ["u32"],
    "description": ["an unsigned 32-bit integer."]
  },
  "float scalar": {
    "prefix": ["f", "f3", "f32"],
    "body": ["f32"],
    "description": ["an IEEE-754 binary32, floating point."]
  },
  "boolean scalar": {
    "prefix": ["b", "bo", "boo", "bool"],
    "body": ["f32"],
    "description": ["boolean."]
  },
  "type": {
    "prefix": ["t", "ty", "type", "typ"],
    "body": ["type $1 = "],
    "description": ["@param 1 — type name"]
  },
  "matrix 4x4": {
    "prefix": ["mat", "m", "44", "m4"],
    "body": ["mat4x4<${1:f32}>"],
    "description": ["@param 1 — number type"]
  },

  "binding group uniform value": {
    "prefix": ["uvar"],
    "body": ["@group(0) @binding(0) var<uniform> $1: "],
    "description": ["@param 1 — group number"]
  },
  "binding group storage value": {
    "prefix": ["svar"],
    "body": ["@group(${1:0}) @binding(${2:0}) var<uniform> $3: "],
    "description": ["@param 1 — group number"]
  },
  "@group": {
    "prefix": ["g", "group", "grou", "gr", "@g", "@gr", "gro", "@gro"],
    "body": ["@group(${1:0}) "],
    "description": ["@param 1 — group number"]
  },
  "@binding": {
    "prefix": ["bi"],
    "body": ["@binding(${1:0}) "],
    "description": ["@param 1 — binding number"]
  },
  "@builtin": {
    "prefix": ["bu"],
    "body": ["@group($1) "],
    "description": ["@param 1 — builtin number"]
  },
  "@location": {
    "prefix": ["lo"],
    "body": ["@location(${1:0}) "],
    "description": ["@param 1 — location number"]
  },
  "struct body": {
    "prefix": ["s", "st", "str", "struct"],
    "body": ["struct ${1:structName} {", "", "}"],
    "description": ["@param structName — struct name"]
  },
  "shader function": {
    "prefix": ["main"],
    "body": ["fn ${1:main}() -> $2 {", "", "}"],
    "description": ["@param structName — shader name"]
  },
  "function": {
    "prefix": ["fun", "fn"],
    "body": ["fn ${1:name}(${2:params}:${3:type}) -> ${4:returnType} {", "", "}"],
    "description": ["@param structName — shader name"]
  }
}
